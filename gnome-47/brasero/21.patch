From ce317f4dfd2d84842ad5ad22e96034e42e49ca9e Mon Sep 17 00:00:00 2001
From: Corey Berla <corey@berla.me>
Date: Mon, 12 Sep 2022 09:42:45 -0700
Subject: [PATCH 1/4] nautilus-burn-extension: Drop burn-bar

libnautilus-extension-4 dropped the location widget provider
https://gitlab.gnome.org/GNOME/nautilus/-/commit/b625533fa4ba0fcf417e751949d8e81c9133d17e
---
 nautilus/Makefile.am               |   2 -
 nautilus/nautilus-burn-bar.c       | 475 -----------------------------
 nautilus/nautilus-burn-bar.h       |  76 -----
 nautilus/nautilus-burn-extension.c | 107 -------
 4 files changed, 660 deletions(-)
 delete mode 100644 nautilus/nautilus-burn-bar.c
 delete mode 100644 nautilus/nautilus-burn-bar.h

diff --git a/nautilus/Makefile.am b/nautilus/Makefile.am
index 01dfe69a9..3ab0b3069 100644
--- a/nautilus/Makefile.am
+++ b/nautilus/Makefile.am
@@ -41,8 +41,6 @@ nautilus_extensiondir = $(NAUTILUSDIR)
 nautilus_extension_LTLIBRARIES = libnautilus-brasero-extension.la
 
 libnautilus_brasero_extension_la_SOURCES = 	\
-	nautilus-burn-bar.c			\
-	nautilus-burn-bar.h			\
 	nautilus-burn-extension.c
 
 libnautilus_brasero_extension_la_LIBADD =	\
diff --git a/nautilus/nautilus-burn-bar.c b/nautilus/nautilus-burn-bar.c
deleted file mode 100644
index 585b2d5df..000000000
--- a/nautilus/nautilus-burn-bar.c
+++ /dev/null
@@ -1,475 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2005 William Jon McCann <mccann@jhu.edu>
- * Copyright (C) 2008 Philippe Rouquier <bonfire-app@wanadoo.fr>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
- *
- * Authors: William Jon McCann <mccann@jhu.edu>
- *
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include <glib/gi18n-lib.h>
-#include <gtk/gtk.h>
-
-#include "nautilus-burn-bar.h"
-
-static void nautilus_disc_burn_bar_finalize   (GObject *object);
-
-#define NAUTILUS_DISC_BURN_BAR_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NAUTILUS_TYPE_DISC_BURN_BAR, NautilusDiscBurnBarPrivate))
-
-struct NautilusDiscBurnBarPrivate
-{
-        GtkWidget  *button;
-        GtkWidget  *title;
-        gchar      *icon_path;
-};
-
-enum {
-        TITLE_CHANGED,
-        ICON_CHANGED,
-        ACTIVATE,
-        LAST_SIGNAL
-};
-
-static guint           signals [LAST_SIGNAL] = { 0, };
-
-G_DEFINE_TYPE (NautilusDiscBurnBar, nautilus_disc_burn_bar, GTK_TYPE_BOX)
-
-const gchar *
-nautilus_disc_burn_bar_get_icon (NautilusDiscBurnBar *bar)
-{
-        g_return_val_if_fail (bar != NULL, NULL);
-        return bar->priv->icon_path;
-}
-
-void
-nautilus_disc_burn_bar_set_icon (NautilusDiscBurnBar *bar,
-                                 const gchar *icon_path)
-{
-        g_return_if_fail (bar != NULL);
-
-        if (bar->priv->icon_path)
-                g_free (bar->priv->icon_path);
-
-        bar->priv->icon_path = g_strdup (icon_path);
-
-        if (bar->priv->icon_path) {
-                GIcon *icon;
-                GFile *file;
-
-                file = g_file_new_for_path (bar->priv->icon_path);
-		icon = g_file_icon_new (file);
-                g_object_unref (file);
-                gtk_entry_set_icon_from_gicon (GTK_ENTRY (bar->priv->title),
-                                               GTK_ENTRY_ICON_PRIMARY,
-                                               icon);
-                g_object_unref (icon);
-        }
-	else
-                gtk_entry_set_icon_from_icon_name (GTK_ENTRY (bar->priv->title),
-						   GTK_ENTRY_ICON_PRIMARY,
-						   "media-optical");
-}
-
-const gchar *
-nautilus_disc_burn_bar_get_title (NautilusDiscBurnBar *bar)
-{
-        g_return_val_if_fail (bar != NULL, NULL);
-        return gtk_entry_get_text (GTK_ENTRY (bar->priv->title));
-}
-
-void
-nautilus_disc_burn_bar_set_title (NautilusDiscBurnBar *bar,
-                                  const gchar *title)
-{
-        g_return_if_fail (bar != NULL);
-
-        if (!title) {
-                time_t  t;
-                gchar  *title_str;
-                gchar   buffer [128];
-
-                t = time (NULL);
-                strftime (buffer, sizeof (buffer), "%d %b %y", localtime (&t));
-
-	        /* NOTE to translators: the final string must not be over
-		 * 32 _bytes_ otherwise it gets truncated.
-		 * The %s is the date */
-		title_str = g_strdup_printf (_("Data disc (%s)"), buffer);
-
-		if (strlen (title_str) > 32) {
-			g_free (title_str);
-			strftime (buffer, sizeof (buffer), "%F", localtime (&t));
-			title_str = g_strdup_printf ("Data disc %s", buffer);
-		}
-
-                gtk_entry_set_text (GTK_ENTRY (bar->priv->title), title_str);
-        }
-        else
-                gtk_entry_set_text (GTK_ENTRY (bar->priv->title), title);
-}
-
-GtkWidget *
-nautilus_disc_burn_bar_get_button (NautilusDiscBurnBar *bar)
-{
-        GtkWidget *button;
-
-        g_return_val_if_fail (bar != NULL, NULL);
-
-        button = bar->priv->button;
-
-        return button;
-}
-
-static void
-nautilus_disc_burn_bar_set_property (GObject            *object,
-                                guint               prop_id,
-                                const GValue       *value,
-                                GParamSpec         *pspec)
-{
-        switch (prop_id) {
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-                break;
-        }
-}
-
-static void
-nautilus_disc_burn_bar_get_property (GObject    *object,
-                                guint       prop_id,
-                                GValue     *value,
-                                GParamSpec *pspec)
-{
-        switch (prop_id) {
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-                break;
-        }
-}
-
-static void
-nautilus_disc_burn_bar_class_init (NautilusDiscBurnBarClass *klass)
-{
-        GObjectClass   *object_class = G_OBJECT_CLASS (klass);
-
-        object_class->finalize     = nautilus_disc_burn_bar_finalize;
-        object_class->get_property = nautilus_disc_burn_bar_get_property;
-        object_class->set_property = nautilus_disc_burn_bar_set_property;
-
-        g_type_class_add_private (klass, sizeof (NautilusDiscBurnBarPrivate));
-
-        signals [TITLE_CHANGED] = g_signal_new ("title_changed",
-                                                G_TYPE_FROM_CLASS (klass),
-                                                G_SIGNAL_RUN_LAST,
-                                                G_STRUCT_OFFSET (NautilusDiscBurnBarClass, title_changed),
-                                                NULL, NULL,
-                                                g_cclosure_marshal_VOID__VOID,
-                                                G_TYPE_NONE, 0);
-        signals [ICON_CHANGED] = g_signal_new ("icon_changed",
-                                               G_TYPE_FROM_CLASS (klass),
-                                               G_SIGNAL_RUN_LAST,
-                                               G_STRUCT_OFFSET (NautilusDiscBurnBarClass, icon_changed),
-                                               NULL, NULL,
-                                               g_cclosure_marshal_VOID__VOID,
-                                               G_TYPE_NONE, 0);
-        signals [ACTIVATE] = g_signal_new ("activate",
-                                           G_TYPE_FROM_CLASS (klass),
-                                           G_SIGNAL_RUN_LAST,
-                                           G_STRUCT_OFFSET (NautilusDiscBurnBarClass, activate),
-                                           NULL, NULL,
-                                           g_cclosure_marshal_VOID__VOID,
-                                           G_TYPE_NONE, 0);
-}
-
-static void
-button_clicked_cb (GtkWidget       *button,
-                   NautilusDiscBurnBar *bar)
-{
-        g_signal_emit (bar, signals [ACTIVATE], 0);
-}
-
-static void
-nautilus_disc_burn_bar_title_changed (GtkEditable *editable,
-                                      NautilusDiscBurnBar *bar)
-{
-	g_signal_emit (bar,
-		       signals [TITLE_CHANGED],
-		       0);
-}
-
-static void
-nautilus_disc_burn_bar_icon_button_clicked (GtkEntry *entry,
-                                            GtkEntryIconPosition position,
-                                            GdkEvent *event,
-                                            NautilusDiscBurnBar *bar)
-{
-        GtkFileFilter *filter;
-	GtkWidget *chooser;
-	gchar *path;
-	gint res;
-
-	chooser = gtk_file_chooser_dialog_new (_("Medium Icon"),
-					       GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (bar))),
-					       GTK_FILE_CHOOSER_ACTION_OPEN,
-					       GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
-					       GTK_STOCK_OK, GTK_RESPONSE_OK,
-					       NULL);
-
-	filter = gtk_file_filter_new ();
-	gtk_file_filter_set_name (filter, _("All files"));
-	gtk_file_filter_add_pattern (filter, "*");
-	gtk_file_chooser_add_filter (GTK_FILE_CHOOSER (chooser), filter);
-
-	filter = gtk_file_filter_new ();
-	/* Translators: this is an image, a picture, not a "Disc Image" */
-	gtk_file_filter_set_name (filter, C_("picture", "Image files"));
-	gtk_file_filter_add_mime_type (filter, "image/*");
-	gtk_file_chooser_add_filter (GTK_FILE_CHOOSER (chooser), filter);
-
-	gtk_file_chooser_set_filter (GTK_FILE_CHOOSER (chooser), filter);
-
-        if (bar->priv->icon_path)
-		gtk_file_chooser_set_filename (GTK_FILE_CHOOSER (chooser), bar->priv->icon_path);
-
-	gtk_widget_show (chooser);
-	res = gtk_dialog_run (GTK_DIALOG (chooser));
-	if (res != GTK_RESPONSE_OK) {
-		gtk_widget_destroy (chooser);
-		return;
-	}
-
-	path = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (chooser));
-	gtk_widget_destroy (chooser);
-
-        nautilus_disc_burn_bar_set_icon (bar, path);
-        g_free (path);
-
-        g_signal_emit (bar,
-                       signals [ICON_CHANGED],
-                       0);
-}
-
-static void
-nautilus_disc_burn_bar_title_insert_text (GtkEditable *editable,
-                                          const gchar *text,
-                                          gint length,
-                                          gint *position,
-                                          NautilusDiscBurnBar *bar)
-{
-	const gchar *label;
-	gchar *new_text;
-	gint new_length;
-	gchar *current;
-	gint max_len;
-	gchar *prev;
-	gchar *next;
-
-	/* check if this new text will fit in 32 _bytes_ long buffer */
-	label = gtk_entry_get_text (GTK_ENTRY (editable));
-	max_len = 32 - strlen (label) - length;
-	if (max_len >= 0)
-		return;
-
-	gdk_beep ();
-
-	/* get the last character '\0' of the text to be inserted */
-	new_length = length;
-	new_text = g_strdup (text);
-	current = g_utf8_offset_to_pointer (new_text, g_utf8_strlen (new_text, -1));
-
-	/* don't just remove one character in case there was many more
-	 * that were inserted at the same time through DND, paste, ... */
-	prev = g_utf8_find_prev_char (new_text, current);
-	if (!prev) {
-		/* no more characters so no insertion */
-		g_signal_stop_emission_by_name (editable, "insert_text"); 
-		g_free (new_text);
-		return;
-	}
-
-	do {
-		next = current;
-		current = prev;
-
-		prev = g_utf8_find_prev_char (new_text, current);
-		if (!prev) {
-			/* no more characters so no insertion */
-			g_signal_stop_emission_by_name (editable, "insert_text"); 
-			g_free (new_text);
-			return;
-		}
-
-		new_length -= next - current;
-		max_len += next - current;
-	} while (max_len < 0 && new_length > 0);
-
-	*current = '\0';
-	g_signal_handlers_block_by_func (editable,
-					 (gpointer) nautilus_disc_burn_bar_title_insert_text,
-					 bar);
-	gtk_editable_insert_text (editable, new_text, new_length, position);
-	g_signal_handlers_unblock_by_func (editable,
-					   (gpointer) nautilus_disc_burn_bar_title_insert_text,
-					   bar);
-
-	g_signal_stop_emission_by_name (editable, "insert_text");
-	g_free (new_text);
-}
-
-static void
-nautilus_disc_burn_bar_init (NautilusDiscBurnBar *bar)
-{
-        GtkWidget   *table;
-        GtkWidget   *label;
-        GtkWidget   *hbox;
-        GtkWidget   *image;
-        GtkWidget   *entry;
-        gchar       *string;
-
-        bar->priv = NAUTILUS_DISC_BURN_BAR_GET_PRIVATE (bar);
-
-        hbox = GTK_WIDGET (bar);
-        table = gtk_table_new (3, 2, FALSE);       
-
-        gtk_table_set_col_spacings (GTK_TABLE (table), 6);
-        gtk_table_set_row_spacings (GTK_TABLE (table), 6);
-        gtk_widget_show (table);
-        gtk_box_pack_start (GTK_BOX (hbox), table, TRUE, TRUE, 0);
-
-        label = gtk_label_new (_("CD/DVD Creator Folder"));
-        gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-        gtk_widget_show (label);
-        gtk_table_attach (GTK_TABLE (table),
-                          label,
-                          0, 2,
-                          0, 1,
-                          GTK_FILL,
-                          GTK_FILL,
-                          0,
-                          0);
-
-        label = gtk_label_new (_("Disc Name:"));
-        gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-        gtk_widget_show (label);
-        gtk_table_attach (GTK_TABLE (table),
-                          label,
-                          0, 1,
-                          1, 2,
-                          GTK_FILL,
-                          GTK_FILL,
-                          0,
-                          0);
-
-        entry = gtk_entry_new ();
-        bar->priv->title = entry;
-        gtk_widget_show (entry);
-        gtk_table_attach (GTK_TABLE (table),
-                          entry,
-                          1, 2,
-                          1, 2,
-                          GTK_FILL|GTK_EXPAND,
-                          GTK_FILL|GTK_EXPAND,
-                          0,
-                          0);
-
-        g_signal_connect (entry,
-			  "icon-release",
-			  G_CALLBACK (nautilus_disc_burn_bar_icon_button_clicked),
-			  bar);
-	g_signal_connect (entry,
-			  "insert_text",
-			  G_CALLBACK (nautilus_disc_burn_bar_title_insert_text),
-			  bar);
-	g_signal_connect (entry,
-			  "changed",
-			  G_CALLBACK (nautilus_disc_burn_bar_title_changed),
-			  bar);
-
-        /* Translators: be careful, anything longer than the English will likely
-         * not fit on small Nautilus windows */
-        string = g_strdup_printf ("<i>%s</i>", _("Drag or copy files below to write them to disc"));
-        label = gtk_label_new (string);
-        g_free (string);
-        gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
-        gtk_label_set_use_markup (GTK_LABEL (label), TRUE);
-        gtk_label_set_ellipsize (GTK_LABEL (label), PANGO_ELLIPSIZE_END);
-        gtk_widget_show (label);
-        gtk_table_attach (GTK_TABLE (table),
-                          label,
-                          0, 2,
-                          2, 3,
-                          GTK_FILL|GTK_EXPAND,
-                          GTK_FILL|GTK_EXPAND,
-                          0,
-                          0);
-
-        bar->priv->button = gtk_button_new_with_label (_("Write to Disc"));
-        gtk_widget_show (bar->priv->button);
-        gtk_table_attach (GTK_TABLE (table),
-                          bar->priv->button,
-                          2, 3,
-                          1, 2,
-                          GTK_FILL,
-                          GTK_FILL,
-                          0,
-                          0);
-
-        image = gtk_image_new_from_icon_name ("media-optical-burn", GTK_ICON_SIZE_BUTTON);
-        gtk_widget_show (image);
-        gtk_button_set_image (GTK_BUTTON (bar->priv->button), image);
-
-        g_signal_connect (bar->priv->button, "clicked",
-                          G_CALLBACK (button_clicked_cb),
-                          bar);
-
-        gtk_widget_set_tooltip_text (bar->priv->button, _("Write contents to a CD or DVD"));
-}
-
-static void
-nautilus_disc_burn_bar_finalize (GObject *object)
-{
-        NautilusDiscBurnBar *bar;
-
-        g_return_if_fail (object != NULL);
-        g_return_if_fail (NAUTILUS_IS_DISC_BURN_BAR (object));
-
-        bar = NAUTILUS_DISC_BURN_BAR (object);
-
-        g_return_if_fail (bar->priv != NULL);
-
-        if (bar->priv->icon_path) {
-                g_free (bar->priv->icon_path);
-                bar->priv->icon_path = NULL;
-        }
-
-        G_OBJECT_CLASS (nautilus_disc_burn_bar_parent_class)->finalize (object);
-}
-
-GtkWidget *
-nautilus_disc_burn_bar_new (void)
-{
-        GObject *result;
-
-        result = g_object_new (NAUTILUS_TYPE_DISC_BURN_BAR,
-                               "spacing", 6,
-                               NULL);
-
-        return GTK_WIDGET (result);
-}
diff --git a/nautilus/nautilus-burn-bar.h b/nautilus/nautilus-burn-bar.h
deleted file mode 100644
index 6946853bd..000000000
--- a/nautilus/nautilus-burn-bar.h
+++ /dev/null
@@ -1,76 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2005 William Jon McCann <mccann@jhu.edu>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
- *
- * Authors: William Jon McCann <mccann@jhu.edu>
- *
- */
-
-#ifndef __NAUTILUS_BURN_BAR_H
-#define __NAUTILUS_BURN_BAR_H
-
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-#define NAUTILUS_TYPE_DISC_BURN_BAR         (nautilus_disc_burn_bar_get_type ())
-#define NAUTILUS_DISC_BURN_BAR(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_TYPE_DISC_BURN_BAR, NautilusDiscBurnBar))
-#define NAUTILUS_DISC_BURN_BAR_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), NAUTILUS_TYPE_DISC_BURN_BAR, NautilusDiscBurnBarClass))
-#define NAUTILUS_IS_DISC_BURN_BAR(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_TYPE_DISC_BURN_BAR))
-#define NAUTILUS_IS_DISC_BURN_BAR_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), NAUTILUS_TYPE_DISC_BURN_BAR))
-#define NAUTILUS_DISC_BURN_BAR_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NAUTILUS_TYPE_DISC_BURN_BAR, NautilusDiscBurnBarClass))
-
-typedef struct NautilusDiscBurnBarPrivate NautilusDiscBurnBarPrivate;
-
-typedef struct
-{
-        GtkBox                     box;
-        NautilusDiscBurnBarPrivate *priv;
-} NautilusDiscBurnBar;
-
-typedef struct
-{
-        GtkBoxClass          parent_class;
-
-	void (* title_changed) (NautilusDiscBurnBar *bar);
-	void (* icon_changed)  (NautilusDiscBurnBar *bar);
-	void (* activate)      (NautilusDiscBurnBar *bar);
-
-} NautilusDiscBurnBarClass;
-
-GType       nautilus_disc_burn_bar_get_type          (void);
-GtkWidget  *nautilus_disc_burn_bar_new               (void);
-
-GtkWidget  *nautilus_disc_burn_bar_get_button        (NautilusDiscBurnBar *bar);
-
-const gchar *
-nautilus_disc_burn_bar_get_icon (NautilusDiscBurnBar *bar);
-
-void
-nautilus_disc_burn_bar_set_icon (NautilusDiscBurnBar *bar,
-                                 const gchar *icon_path);
-
-void
-nautilus_disc_burn_bar_set_title (NautilusDiscBurnBar *bar,
-                                  const gchar *title);
-
-const gchar *
-nautilus_disc_burn_bar_get_title (NautilusDiscBurnBar *bar);
-
-G_END_DECLS
-
-#endif /* __GS_BURN_BAR_H */
diff --git a/nautilus/nautilus-burn-extension.c b/nautilus/nautilus-burn-extension.c
index 3be8e5fac..fcb4c53c6 100644
--- a/nautilus/nautilus-burn-extension.c
+++ b/nautilus/nautilus-burn-extension.c
@@ -53,8 +53,6 @@
 #include "brasero-burn-options.h"
 #include "brasero-burn-dialog.h"
 
-#include "nautilus-burn-bar.h"
-
 #include "brasero-misc.h"
 
 #include "brasero-media-private.h"
@@ -89,11 +87,6 @@ struct _NautilusDiscBurnPrivate
 
         guint         start_monitor_id;
         guint         empty_update_id;
-
-        GSList       *widget_list;
-
-	gchar        *title;
-	gchar        *icon;
 };
 
 static GType nautilus_disc_burn_get_type      (void);
@@ -745,95 +738,6 @@ nautilus_disc_burn_menu_provider_iface_init (NautilusMenuProviderIface *iface)
         iface->get_background_items = nautilus_disc_burn_get_background_items;
 }
 
-static void
-bar_activated_cb (NautilusDiscBurnBar	*bar,
-                  gpointer		 user_data)
-{
-	write_activate (NAUTILUS_DISC_BURN (user_data),
-	                GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (bar))));
-}
-
-static void
-title_changed_cb (NautilusDiscBurnBar	*bar,
-                  NautilusDiscBurn	*burn)
-{
-	if (burn->priv->title)
-		g_free (burn->priv->title);
-	burn->priv->title = g_strdup (nautilus_disc_burn_bar_get_title (bar));
-}
-
-static void
-icon_changed_cb (NautilusDiscBurnBar	*bar,
-                 NautilusDiscBurn	*burn)
-{
-	if (burn->priv->icon)
-		g_free (burn->priv->icon);
-	burn->priv->icon = g_strdup (nautilus_disc_burn_bar_get_icon (bar));
-}
-
-static void
-destroyed_callback (GtkWidget    *widget,
-                    NautilusDiscBurn *burn)
-{
-        burn->priv->widget_list = g_slist_remove (burn->priv->widget_list, widget);
-}
-
-static void
-sense_widget (NautilusDiscBurn *burn,
-              GtkWidget    *widget)
-{
-        gtk_widget_set_sensitive (widget, !burn->priv->empty);
-
-        burn->priv->widget_list = g_slist_prepend (burn->priv->widget_list, widget);
-
-        g_signal_connect (widget, "destroy",
-                          G_CALLBACK (destroyed_callback),
-                          burn);
-}
-
-static GtkWidget *
-nautilus_disc_burn_get_location_widget (NautilusLocationWidgetProvider *iface,
-                                        const char                     *uri,
-                                        GtkWidget                      *window)
-{
-        if (g_str_has_prefix (uri, "burn:")) {
-                GtkWidget    *bar;
-                NautilusDiscBurn *burn;
-
-                DEBUG_PRINT ("Get location widget for burn\n");
-
-                burn = NAUTILUS_DISC_BURN (iface);
-
-                bar = nautilus_disc_burn_bar_new ();
-		nautilus_disc_burn_bar_set_title (NAUTILUS_DISC_BURN_BAR (bar),
-		                                  burn->priv->title);
-		nautilus_disc_burn_bar_set_icon (NAUTILUS_DISC_BURN_BAR (bar),
-		                                 burn->priv->icon);
-                sense_widget (burn, nautilus_disc_burn_bar_get_button (NAUTILUS_DISC_BURN_BAR (bar)));
-
-                g_signal_connect (bar, "activate",
-                                  G_CALLBACK (bar_activated_cb),
-                                  burn);
-		g_signal_connect (bar, "title-changed",
-		                  G_CALLBACK (title_changed_cb),
-		                  burn);
-		g_signal_connect (bar, "icon-changed",
-		                  G_CALLBACK (icon_changed_cb),
-		                  burn);
-
-                gtk_widget_show (bar);
-
-                return bar;
-        }
-
-        return NULL;
-}
-
-static void
-nautilus_disc_burn_location_widget_provider_iface_init (NautilusLocationWidgetProviderIface *iface)
-{
-        iface->get_widget = nautilus_disc_burn_get_location_widget;
-}
 
 static void
 update_widget_sensitivity (GtkWidget    *widget,
@@ -855,8 +759,6 @@ update_empty_idle (NautilusDiscBurn *burn)
 
         if (burn->priv->empty != is_empty) {
                 burn->priv->empty = is_empty;
-                /* update bar */
-                g_slist_foreach (burn->priv->widget_list, (GFunc)update_widget_sensitivity, burn);
 
                 /* Trigger update for menu items */
                 nautilus_menu_provider_emit_items_updated_signal (NAUTILUS_MENU_PROVIDER (burn));
@@ -1025,11 +927,6 @@ nautilus_disc_burn_register_type (GTypeModule *module)
                 NULL,
                 NULL
         };
-        static const GInterfaceInfo location_widget_provider_iface_info = {
-                (GInterfaceInitFunc) nautilus_disc_burn_location_widget_provider_iface_init,
-                NULL,
-                NULL
-        };
 
         burn_type = g_type_module_register_type (module,
                                                  G_TYPE_OBJECT,
@@ -1040,10 +937,6 @@ nautilus_disc_burn_register_type (GTypeModule *module)
                                      burn_type,
                                      NAUTILUS_TYPE_MENU_PROVIDER,
                                      &menu_provider_iface_info);
-        g_type_module_add_interface (module,
-                                     burn_type,
-                                     NAUTILUS_TYPE_LOCATION_WIDGET_PROVIDER,
-                                     &location_widget_provider_iface_info);
 }
 
 void
-- 
GitLab


From 97a091744e5a3bef03626fed825844eee55a13d2 Mon Sep 17 00:00:00 2001
From: Corey Berla <corey@berla.me>
Date: Mon, 12 Sep 2022 09:56:06 -0700
Subject: [PATCH 2/4] nautilus-burn-extension: Remove deprecated libnautilus
 headers and symbols

---
 nautilus/nautilus-burn-extension.c | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/nautilus/nautilus-burn-extension.c b/nautilus/nautilus-burn-extension.c
index fcb4c53c6..341d34c7c 100644
--- a/nautilus/nautilus-burn-extension.c
+++ b/nautilus/nautilus-burn-extension.c
@@ -30,8 +30,7 @@
 #include <gdk/gdkx.h>
 #include <gtk/gtk.h>
 
-#include <libnautilus-extension/nautilus-menu-provider.h>
-#include <libnautilus-extension/nautilus-location-widget-provider.h>
+#include <nautilus-extension.h>
 
 #include "brasero-media.h"
 #include "brasero-medium-monitor.h"
@@ -513,7 +512,6 @@ drive_is_cd_device (GDrive *gdrive)
 
 static GList *
 nautilus_disc_burn_get_file_items (NautilusMenuProvider *provider,
-                                   GtkWidget            *window,
                                    GList                *selection)
 {
         GList            *items = NULL;
@@ -732,7 +730,7 @@ nautilus_disc_burn_get_background_items (NautilusMenuProvider *provider,
 }
 
 static void
-nautilus_disc_burn_menu_provider_iface_init (NautilusMenuProviderIface *iface)
+nautilus_disc_burn_menu_provider_iface_init (NautilusMenuProviderInterface *iface)
 {
         iface->get_file_items = nautilus_disc_burn_get_file_items;
         iface->get_background_items = nautilus_disc_burn_get_background_items;
-- 
GitLab


From 5baff88db54d0479560e069a1acc06aff7daf34f Mon Sep 17 00:00:00 2001
From: Corey Berla <corey@berla.me>
Date: Mon, 12 Sep 2022 10:03:29 -0700
Subject: [PATCH 3/4] build: Bump to libnautilus-extension-4

---
 configure.ac | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/configure.ac b/configure.ac
index 188c011e0..bc9463990 100644
--- a/configure.ac
+++ b/configure.ac
@@ -268,7 +268,7 @@ AC_ARG_WITH(nautilusdir,
 
 if test x"$enable_nautilus" = "xyes"; then
     	PKG_CHECK_MODULES(NAUTILUS_EXTENSION,
-			  libnautilus-extension >= $NAUTILUS_REQUIRED,
+			  libnautilus-extension-4 >= $NAUTILUS_REQUIRED,
 			  build_nautilus=yes,
 			  build_nautilus=no)
 else
@@ -280,7 +280,7 @@ if test x"$build_nautilus" = "xyes"; then
 	NAUTILUS_EXTENSION_LIBS="$BRASERO_GLIB_LIBS $BRASERO_UI_LIBS $NAUTILUS_EXTENSION_LIBS"
 
 	if test "${ac_with_nautilusdir}" = ""; then
-		ac_with_nautilusdir=`pkg-config --variable=extensiondir libnautilus-extension`
+		ac_with_nautilusdir=`pkg-config --variable=extensiondir libnautilus-extension-4`
 	fi
 
 	AC_MSG_NOTICE([installing plugin in ${ac_with_nautilusdir}])
-- 
GitLab


From 4b92abc427be23574380d9186d7ab6c9a99922b3 Mon Sep 17 00:00:00 2001
From: Corey Berla <corey@berla.me>
Date: Mon, 12 Sep 2022 09:59:13 -0700
Subject: [PATCH 4/4] nautilus-burn-extension: Port to libnautilus-extension-4

libnautilus-extension-4 uses gtk4.  nautilus-burn-extension
relies on windows and dialogs in gtk3.  Rather than attempt to port
brasero to gtk4, utilize the bransero-cli which has the added benefit
of keeping most of the logic out of the nautilus process.
---
 nautilus/nautilus-burn-extension.c | 324 ++++-------------------------
 1 file changed, 43 insertions(+), 281 deletions(-)

diff --git a/nautilus/nautilus-burn-extension.c b/nautilus/nautilus-burn-extension.c
index 341d34c7c..93a7b9222 100644
--- a/nautilus/nautilus-burn-extension.c
+++ b/nautilus/nautilus-burn-extension.c
@@ -27,8 +27,6 @@
 #include <stdlib.h>
 #include <string.h>
 #include <glib/gi18n-lib.h>
-#include <gdk/gdkx.h>
-#include <gtk/gtk.h>
 
 #include <nautilus-extension.h>
 
@@ -39,26 +37,13 @@
 
 #include "brasero-burn-lib.h"
 #include "brasero-track.h"
-#include "brasero-track-data-cfg.h"
 #include "brasero-track-image-cfg.h"
 #include "brasero-track-disc.h"
-#include "brasero-session.h"
-#include "brasero-session-cfg.h"
-
-#include "brasero-tool-dialog.h"
-#include "brasero-blank-dialog.h"
-#include "brasero-sum-dialog.h"
-
-#include "brasero-burn-options.h"
-#include "brasero-burn-dialog.h"
-
-#include "brasero-misc.h"
 
 #include "brasero-media-private.h"
 #include "burn-debug.h"
 
 #define BURN_URI	"burn:///"
-#define WINDOW_KEY      "NautilusWindow"
 
 #define NAUTILUS_TYPE_DISC_BURN  (nautilus_disc_burn_get_type ())
 #define NAUTILUS_DISC_BURN(o)    (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_TYPE_DISC_BURN, NautilusDiscBurn))
@@ -102,7 +87,7 @@ static GObjectClass *parent_class;
 /* do not call brasero_*_start() at nautilus startup, they are very expensive;
  * lazily initialize those instead */
 static void
-ensure_initialized ()
+ensure_initialized (void)
 {
 	static gboolean initialized = FALSE;
 
@@ -124,65 +109,8 @@ ensure_initialized ()
 	}
 }
 
-static void
-launch_brasero_on_window_session (BraseroSessionCfg	*session,
-                                  const gchar		*dialog_title,
-				  GtkWidget		*options,
-				  GtkWindow		*window)
-{
-	GtkResponseType		 result;
-	const gchar		*icon_name;
-	GtkWidget		*dialog;
-
-	/* Get the icon for the window */
-	if (window)
-		icon_name = gtk_window_get_icon_name (window);
-	else
-		icon_name = "brasero";
-
-	/* run option dialog */
-	dialog = brasero_burn_options_new (session);
-	gtk_window_set_icon_name (GTK_WINDOW (dialog), icon_name);
-
-	if (dialog_title)
-		gtk_window_set_title (GTK_WINDOW (dialog), dialog_title);
-
-	if (options)
-		brasero_burn_options_add_options (BRASERO_BURN_OPTIONS (dialog), options);
-
-	gtk_widget_show (GTK_WIDGET (dialog));
-	result = gtk_dialog_run (GTK_DIALOG (dialog));
-	gtk_widget_destroy (dialog);
-
-	if (result != GTK_RESPONSE_OK
-	&&  result != GTK_RESPONSE_ACCEPT)
-		return;
-
-	/* now run burn dialog */
-	dialog = brasero_burn_dialog_new ();
-
-	gtk_window_set_icon_name (GTK_WINDOW (dialog), icon_name);
-
-	if (dialog_title)
-		gtk_window_set_title (GTK_WINDOW (dialog), dialog_title);
-
-	brasero_session_cfg_disable (session);
-
-	gtk_widget_show (dialog);
-	gtk_window_present (GTK_WINDOW (dialog));
-
-	if (result == GTK_RESPONSE_OK)
-		brasero_burn_dialog_run (BRASERO_BURN_DIALOG (dialog),
-		                                   BRASERO_BURN_SESSION (session));
-	else
-		brasero_burn_dialog_run_multi (BRASERO_BURN_DIALOG (dialog),
-		                                         BRASERO_BURN_SESSION (session));
-
-	gtk_widget_destroy (dialog);
-}
-
 static gboolean
-nautilus_disc_burn_is_empty (GtkWindow *toplevel)
+nautilus_disc_burn_is_empty (void)
 {
 	GFileEnumerator *enumerator;
 	GFileInfo *info = NULL;
@@ -196,24 +124,10 @@ nautilus_disc_burn_is_empty (GtkWindow *toplevel)
 						NULL,
 						&error);
 	if (!enumerator) {
-		gchar *string;
-
 		DEBUG_PRINT ("Could not open burn uri %s: %s\n",
                              uri,
                              error->message);
 
-		if (!toplevel) {
-			g_error_free (error);
-			return TRUE;
-		}
-
-		string = g_strdup_printf ("%s.", _("An internal error occurred"));
-		brasero_utils_message_dialog (GTK_WIDGET (toplevel),
-					      string,
-					      error ? error->message:NULL,
-					      GTK_MESSAGE_ERROR);
-		g_free (string);
-
 		g_object_unref (file);
 		g_error_free (error);
 		return TRUE;
@@ -224,13 +138,6 @@ nautilus_disc_burn_is_empty (GtkWindow *toplevel)
 	g_object_unref (file);
 
 	if (!info) {
-		if (!toplevel)
-			return TRUE;
-
-		brasero_utils_message_dialog (GTK_WIDGET (toplevel),
-					      _("Please add files."),
-					      _("There are no files to write to disc"),
-					      GTK_MESSAGE_ERROR);
 		return TRUE;
 	}
 
@@ -239,193 +146,76 @@ nautilus_disc_burn_is_empty (GtkWindow *toplevel)
 }
 
 static void
-write_activate (NautilusDiscBurn *burn,
-                GtkWindow *toplevel)
-{
-	BraseroTrackDataCfg	*track;
-	BraseroSessionCfg	*session;
-
-	if (nautilus_disc_burn_is_empty (toplevel))
-		return;
-
-	ensure_initialized ();
-
-	track = brasero_track_data_cfg_new ();
-	brasero_track_data_cfg_add (track, BURN_URI, NULL);
-
-	if (burn->priv->icon)
-		brasero_track_data_cfg_set_icon (BRASERO_TRACK_DATA_CFG (track),
-		                                 burn->priv->icon,
-		                                 NULL);
-
-	session = brasero_session_cfg_new ();
-	brasero_burn_session_add_track (BRASERO_BURN_SESSION (session),
-					BRASERO_TRACK (track),
-					NULL);
-	g_object_unref (track);
-
-	if (burn->priv->title)
-		brasero_burn_session_set_label (BRASERO_BURN_SESSION (session),
-		                                burn->priv->title);
-
-	/* NOTE: set the disc we're handling */
-	launch_brasero_on_window_session (session,
-	                                  _("CD/DVD Creator"),
-	                                  NULL,
-	                                  toplevel);
-
-	/* cleanup */
-	g_object_unref (session);
-}
-
-static void
-write_activate_cb (NautilusMenuItem *item,
-                   gpointer          user_data)
-{
-	write_activate (NAUTILUS_DISC_BURN (user_data),
-	                GTK_WINDOW (g_object_get_data (G_OBJECT (item), WINDOW_KEY)));
-}
-
-static void
-launch_brasero_on_window_track (BraseroTrack	*track,
-                                const gchar	*dialog_title,
-				GtkWidget	*options,
-				GtkWindow	*window)
+write_disc_activate_cb (NautilusMenuItem *item,
+                        gpointer          user_data)
 {
-	BraseroSessionCfg *session;
-
-	/* create a session and add track */
-	session = brasero_session_cfg_new ();
-	brasero_burn_session_add_track (BRASERO_BURN_SESSION (session),
-					BRASERO_TRACK (track),
-					NULL);
-
-	launch_brasero_on_window_session (session,
-	                                  dialog_title,
-	                                  options,
-	                                  window);
-	g_object_unref (session);
-}
+	g_autoptr (GAppInfo) app_info = NULL;
+	gchar *cmd_line = "brasero --ncb --immediately";
 
-static void
-brasero_nautilus_track_changed_cb (BraseroTrack *track,
-				   gpointer user_data)
-{
-	launch_brasero_on_window_track (track,
-	                                _("Write to Disc"),
-	                                NULL,
-	                                GTK_WINDOW (user_data));
-	g_object_unref (track);
+	app_info = g_app_info_create_from_commandline (cmd_line, NULL, 0, NULL);
+	g_app_info_launch (app_info, NULL, NULL, NULL);
 }
 
 static void
 write_iso_activate_cb (NautilusMenuItem *item,
                        gpointer          user_data)
 {
-	BraseroTrackImageCfg	*track;
+	g_autoptr (GAppInfo) app_info = NULL;
+	g_autofree gchar *cmd_line = NULL;
         NautilusFileInfo	*file_info;
-        char			*uri;
-
-	ensure_initialized();
+        g_autofree gchar	*uri = NULL;
 
         file_info = g_object_get_data (G_OBJECT (item), "file_info");
         uri = nautilus_file_info_get_uri (file_info);
 
-	track = brasero_track_image_cfg_new ();
-	brasero_track_image_cfg_set_source (track, uri);
-
-	g_signal_connect (track, "changed",
-			  G_CALLBACK (brasero_nautilus_track_changed_cb), user_data);
+	cmd_line = g_strconcat ("brasero --image=", uri, NULL);
+	app_info = g_app_info_create_from_commandline (cmd_line, NULL, 0, NULL);
+	g_app_info_launch (app_info, NULL, NULL, NULL);
 }
 
 static void
 copy_disc_activate_cb (NautilusMenuItem *item,
                        gpointer          user_data)
 {
-        char            	*device_path;
-	BraseroMediumMonitor	*monitor;
-	BraseroTrackDisc	*track;
-	BraseroDrive		*drive;
-
-	ensure_initialized();
+        g_autofree gchar *device_path = NULL;
+	g_autoptr (GAppInfo) app_info = NULL;
+	g_autofree gchar *cmd_line = NULL;
 
         device_path = g_object_get_data (G_OBJECT (item), "drive_device_path");
-	monitor = brasero_medium_monitor_get_default ();
-	drive = brasero_medium_monitor_get_drive (monitor, device_path);
-	g_object_unref (monitor);
-
-	track = brasero_track_disc_new ();
-	brasero_track_disc_set_drive (track, drive);
-	g_object_unref (drive);
-
-	launch_brasero_on_window_track (BRASERO_TRACK (track),
-	                                _("Copy Disc"),
-	                                NULL,
-	                                GTK_WINDOW (user_data));
-	g_object_unref (track);
-}
-
-static void
-tool_dialog_run (BraseroToolDialog	*dialog,
-		 GtkWindow		*toplevel,
-		 NautilusMenuItem	*item)
-{
-	char			*device_path;
-	BraseroDrive		*drive;
-	BraseroMediumMonitor	*monitor;
 
-	device_path = g_object_get_data (G_OBJECT (item), "drive_device_path");
-	if (!device_path) {
-		g_warning ("Drive device path not specified");
-		return;
-	}
-
-	monitor = brasero_medium_monitor_get_default ();
-	drive = brasero_medium_monitor_get_drive (monitor, device_path);
-	g_object_unref (monitor);
-
-	if (drive) {
-		brasero_tool_dialog_set_medium (BRASERO_TOOL_DIALOG (dialog),
-						brasero_drive_get_medium (drive));
-		g_object_unref (drive);
-	}
-
-	/* Get the icon for the window */
-	if (toplevel)
-		gtk_window_set_icon_name (GTK_WINDOW (dialog), gtk_window_get_icon_name (toplevel));
-	else
-		gtk_window_set_icon_name (GTK_WINDOW (dialog), "brasero");
-
-	gtk_dialog_run (GTK_DIALOG (dialog));
-	gtk_widget_destroy (GTK_WIDGET (dialog));
+	cmd_line = g_strconcat ("brasero --copy=", device_path, NULL);
+	app_info = g_app_info_create_from_commandline (cmd_line, NULL, 0, NULL);
+	g_app_info_launch (app_info, NULL, NULL, NULL);
 }
 
 static void
 blank_disc_activate_cb (NautilusMenuItem *item,
                         gpointer          user_data)
 {
-	BraseroBlankDialog *dialog;
+	g_autoptr (GAppInfo) app_info = NULL;
+	g_autofree gchar *cmd_line = NULL;
+	g_autofree gchar *device_path = NULL;
 
-	ensure_initialized();
+	device_path = g_object_get_data (G_OBJECT (item), "drive_device_path");
 
-	dialog = brasero_blank_dialog_new ();
-	tool_dialog_run (BRASERO_TOOL_DIALOG (dialog),
-			 GTK_WINDOW (user_data),
-			 item);
+	cmd_line = g_strconcat ("brasero --blank=", device_path, NULL);
+	app_info = g_app_info_create_from_commandline (cmd_line, NULL, 0, NULL);
+	g_app_info_launch (app_info, NULL, NULL, NULL);
 }
 
 static void
 check_disc_activate_cb (NautilusMenuItem *item,
                         gpointer          user_data)
 {
-	BraseroSumDialog *dialog;
+	g_autoptr (GAppInfo) app_info = NULL;
+	g_autofree gchar *cmd_line = NULL;
+	g_autofree gchar *device_path = NULL;
 
-	ensure_initialized ();
+	device_path = g_object_get_data (G_OBJECT (item), "drive_device_path");
 
-	dialog = brasero_sum_dialog_new ();
-	tool_dialog_run (BRASERO_TOOL_DIALOG (dialog),
-			 GTK_WINDOW (user_data),
-			 item);
+	cmd_line = g_strconcat ("brasero --check=", device_path, NULL);
+	app_info = g_app_info_create_from_commandline (cmd_line, NULL, 0, NULL);
+	g_app_info_launch (app_info, NULL, NULL, NULL);
 }
 
 static gboolean
@@ -563,9 +353,8 @@ nautilus_disc_burn_get_file_items (NautilusMenuProvider *provider,
                                                _("Write disc image to a CD or DVD"),
                                                "media-optical-data-new");
                 g_object_set_data (G_OBJECT (item), "file_info", file_info);
-                g_object_set_data (G_OBJECT (item), "window", window);
                 g_signal_connect (item, "activate",
-                                  G_CALLBACK (write_iso_activate_cb), window);
+                                  G_CALLBACK (write_iso_activate_cb), NULL);
                 items = g_list_append (items, item);
         }
 
@@ -637,9 +426,8 @@ nautilus_disc_burn_get_file_items (NautilusMenuProvider *provider,
 						       _("Create a copy of this CD or DVD"),
 						       "media-optical-copy");
 			g_object_set_data (G_OBJECT (item), "file_info", file_info);
-			g_object_set_data (G_OBJECT (item), "window", window);
 			g_object_set_data_full (G_OBJECT (item), "drive_device_path", g_strdup (device_path), g_free);
-			g_signal_connect (item, "activate", G_CALLBACK (copy_disc_activate_cb), window);
+			g_signal_connect (item, "activate", G_CALLBACK (copy_disc_activate_cb), NULL);
 			items = g_list_append (items, item);
 		}
 		brasero_track_type_free (type);
@@ -651,10 +439,9 @@ nautilus_disc_burn_get_file_items (NautilusMenuProvider *provider,
 						       _("Blank this CD or DVD"),
 						       "media-optical-blank");
 			g_object_set_data (G_OBJECT (item), "file_info", file_info);
-			g_object_set_data (G_OBJECT (item), "window", window);
 			g_object_set_data_full (G_OBJECT (item), "drive_device_path", g_strdup (device_path), g_free);
 			g_signal_connect (item, "activate",
-					  G_CALLBACK (blank_disc_activate_cb), window);
+					  G_CALLBACK (blank_disc_activate_cb), NULL);
 			items = g_list_append (items, item);
 		}
 
@@ -668,11 +455,10 @@ nautilus_disc_burn_get_file_items (NautilusMenuProvider *provider,
 						       _("Check the data integrity on this CD or DVD"),
 						       NULL);
 			g_object_set_data (G_OBJECT (item), "file_info", file_info);
-			g_object_set_data (G_OBJECT (item), "window", window);
 			g_object_set_data_full (G_OBJECT (item), "drive_device_path", g_strdup (device_path), g_free);
 			g_signal_connect (item, "activate",
 					  G_CALLBACK (check_disc_activate_cb),
-			                  window);
+			                  NULL);
 			items = g_list_append (items, item);
 		}
 
@@ -696,7 +482,6 @@ nautilus_disc_burn_get_file_items (NautilusMenuProvider *provider,
 
 static GList *
 nautilus_disc_burn_get_background_items (NautilusMenuProvider *provider,
-                                         GtkWidget            *window,
                                          NautilusFileInfo     *current_folder)
 {
         GList *items;
@@ -715,10 +500,9 @@ nautilus_disc_burn_get_background_items (NautilusMenuProvider *provider,
                                                _("_Write to Discâ€¦"),
                                                _("Write contents to a CD or DVD"),
                                                "brasero");
-		g_object_set_data (G_OBJECT (item), WINDOW_KEY, window);
-                g_signal_connect (item, "activate",
-                                  G_CALLBACK (write_activate_cb),
-                                  NAUTILUS_DISC_BURN (provider));
+                g_signal_connect_swapped (item, "activate",
+                                          G_CALLBACK (write_disc_activate_cb),
+                                          NULL);
                 items = g_list_append (items, item);
 
                 g_object_set (item, "sensitive", ! NAUTILUS_DISC_BURN (provider)->priv->empty, NULL);
@@ -736,14 +520,6 @@ nautilus_disc_burn_menu_provider_iface_init (NautilusMenuProviderInterface *ifac
         iface->get_background_items = nautilus_disc_burn_get_background_items;
 }
 
-
-static void
-update_widget_sensitivity (GtkWidget    *widget,
-                           NautilusDiscBurn *burn)
-{
-        gtk_widget_set_sensitive (widget, !burn->priv->empty);
-}
-
 static gboolean
 update_empty_idle (NautilusDiscBurn *burn)
 {
@@ -751,7 +527,7 @@ update_empty_idle (NautilusDiscBurn *burn)
 
         burn->priv->empty_update_id = 0;
 
-        is_empty = nautilus_disc_burn_is_empty (NULL);
+        is_empty = nautilus_disc_burn_is_empty ();
 
         DEBUG_PRINT ("Dir is %s\n", is_empty ? "empty" : "not empty");
 
@@ -821,7 +597,7 @@ start_monitor (NautilusDiscBurn *burn)
                           G_CALLBACK (burn_monitor_cb),
                           burn);
 
-        burn->priv->empty = nautilus_disc_burn_is_empty (NULL);
+        burn->priv->empty = nautilus_disc_burn_is_empty ();
 
         DEBUG_PRINT ("Init burn extension, empty: %d\n", burn->priv->empty);
 
@@ -856,16 +632,6 @@ nautilus_disc_burn_finalize (GObject *object)
 
         g_return_if_fail (burn->priv != NULL);
 
-	if (burn->priv->icon) {
-		g_free (burn->priv->icon);
-		burn->priv->icon = NULL;
-	}
-
-	if (burn->priv->title) {
-		g_free (burn->priv->title);
-		burn->priv->title = NULL;
-	}
-
         if (burn->priv->empty_update_id > 0) {
                 g_source_remove (burn->priv->empty_update_id);
         }
@@ -878,10 +644,6 @@ nautilus_disc_burn_finalize (GObject *object)
                 g_file_monitor_cancel (burn->priv->burn_monitor);
         }
 
-        if (burn->priv->widget_list != NULL) {
-                g_slist_free (burn->priv->widget_list);
-        }
-
         G_OBJECT_CLASS (parent_class)->finalize (object);
 }
 
-- 
GitLab

