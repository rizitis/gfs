#!/bin/sh

# gfs (gnome from scratch) system build
#
# Copyright 2016-2021 Rafael Tavares <mdrafaeltavares@gmail.com>
# All rights reserved
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# **=**-Forked and Modified by Anagnostakis Ioannis (rizitis) 2024-**=** #

GFSVERSION=0.3.0
GFSSOURCEDIR=./gnome-47
GFSCWD=$(pwd)
#OUTPUT=$PKGREQ
GFSEDITOR=mousepad

set -e

cd $GFSSOURCEDIR
META=$1
PKGREQ=$(echo $2 | cut -f1 -d'/')
PKGREQ2=$(echo $1 | cut -f1 -d'/')
FINDREQ=${FINDREQ:-$(find $OUTPUT -maxdepth 1 -name $PKGREQ-[0-9]*.txz)}
LOGREQ=${LOGREQ:-$(find /var/lib/pkgtools/packages -maxdepth 1 -name $PKGREQ-[0-9]* | cut -f1 -d" ")}

gfstalk() {
if [ -z "$1" ]; then
 echo -e " -| \033[1m$(basename $0)\033[0m:"
else
 echo -e " -| \033[1m$(basename $0)\033[0m: $1"
fi
}

if [ "$META" != "edit" ] && [ "$META" != "build" ] && [ "$META" != "installpkg" ] && [ "$META" != "prepare" ] && \
   [ "$META" != "catlog" ] && [ "$META" != "newtemplate" ] && [ "$META" != "makegfspkg" ] && [ "$META" != "gfsversion" ] && \
   [ "$META" != "gfshelp" ] && [ "$META" != "message" ] && [ "$META" != "gnome" ] && [ "$META" != "gnome-apps" ] && \
   [ "$META" != "gnome-extra" ] && [ "$META" != "gnome-all" ]; then
    exit
fi

if [ $META = gnome ]; then
source $GFSCWD/gnome.env
 echo "$PKGBUILD"
for buildpkg in "${PKGBUILD[@]}"; do
 if [ -z "$(ls /var/log/packages | grep ^$buildpkg-[0-9] | grep _gfs)" ]; then
  gfstalk "Building $buildpkg..."
  sleep 1
  cd $buildpkg
  pwd && ls
  #OUTPUT=$buildpkg 
  bash $buildpkg.SlackBuild
  gfstalk "$buildpkg builded! Installing..."
  sleep 1
  PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^$buildpkg-[0-9] | grep _gfs)"}
  upgradepkg --install-new --reinstall $PKGINST
  cd ..
 else
  gfstalk "$buildpkg is already installed!"
 fi
done
fi

if [ $META = gnome-apps ]; then
source $GFSCWD/gnome-apps.env
 echo "$PKGBUILD"
for buildpkg in "${PKGBUILD[@]}"; do
 if [ -z "$(ls /var/log/packages | grep ^$buildpkg-[0-9] | grep _gfs)" ]; then
  gfstalk "Building $buildpkg..."
  sleep 1
  cd $buildpkg
  pwd && ls
  #OUTPUT=$buildpkg 
  bash $buildpkg.SlackBuild
  gfstalk "$buildpkg builded! Installing..."
  sleep 1
  PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^$buildpkg-[0-9] | grep _gfs)"}
  upgradepkg --install-new --reinstall $PKGINST
  cd ..
 else
  gfstalk "$buildpkg is already installed!"
 fi
done
fi

if [ $META = gnome-extra ]; then
source $GFSCWD/gnome-extra.env
 echo "$PKGBUILD"
for buildpkg in "${PKGBUILD[@]}"; do
 if [ -z "$(ls /var/log/packages | grep ^$buildpkg-[0-9] | grep _gfs)" ]; then
  gfstalk "Building $buildpkg..."
  sleep 1
  cd $buildpkg
  pwd && ls
  #OUTPUT=$buildpkg 
  bash $buildpkg.SlackBuild
  gfstalk "$buildpkg builded! Installing..."
  sleep 1
  PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^$buildpkg-[0-9] | grep _gfs)"}
  upgradepkg --install-new --reinstall $PKGINST
  cd ..
 else
  gfstalk "$buildpkg is already installed!"
 fi
done
fi

if [ $META = gnome-all ]; then
source $GFSCWD/gnome-all.env
 echo "$PKGBUILD"
for buildpkg in "${PKGBUILD[@]}"; do
 if [ -z "$(ls /var/log/packages | grep ^$buildpkg-[0-9] | grep _gfs)" ]; then
  gfstalk "Building $buildpkg..."
  sleep 1
  cd $buildpkg
  pwd && ls
  #OUTPUT=$buildpkg 
  bash $buildpkg.SlackBuild
  gfstalk "$buildpkg builded! Installing..."
  sleep 1
  PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^$buildpkg-[0-9] | grep _gfs)"}
  upgradepkg --install-new --reinstall $PKGINST
  cd ..
 else
  gfstalk "$buildpkg is already installed!"
 fi
done
fi

if [ $META = gnome-all ] || [ $META = gnome-extra ] || [ $META = gnome-apps ] || [ $META = gnome ]; then 
exit 
fi



edit() {
if [ -z "$PKGREQ" ]; then
 gfstalk "usage:"
 gfstalk " $(basename $0) edit 'ProgramName'"
 exit 1
else
 if [ -f "$PKGREQ/$PKGREQ.SlackBuild" ]; then
  cd "$PKGREQ"
  $GFSEDITOR "$PKGREQ".SlackBuild
  cd ..
 else
  gfstalk "'$PKGREQ' SlackBuild script not found!"
  exit 1
 fi
fi
}

build() {
if [ -z "$PKGREQ" ]; then
 gfstalk "usage:"
 gfstalk " $(basename $0) build 'ProgramName'"
 exit 1
else
 if [ -f "$PKGREQ/$PKGREQ.SlackBuild" ]; then
  cd "$PKGREQ"
  OUTPUT=$buildpkg bash "$PKGREQ".SlackBuild || exit 1
  cd ..
  else
  gfstalk "'$PKGREQ' SlackBuild script not found!"
  exit 1
 fi
fi
}

installpkg() {
if [ -z "$PKGREQ" ]; then
 gfstalk "usage:"
 gfstalk " $(basename $0) install 'ProgramName'"
 exit 1
else
 if [ -z "$FINDREQ" ]; then
  gfstalk "$PKGREQ package not found!"
  exit 1
 else
  upgradepkg --install-new --reinstall "$FINDREQ"
  exit 0
 fi
fi
}

prepare() {
if [ -z "$PKGREQ" ]; then
 gfstalk "usage:"
 gfstalk " $(basename $0) prepare 'ProgramName'"
 exit 1
else
 edit || exit 1
 build || exit 1
 unset FINDREQ
 FINDREQ=${FINDREQ:-$(find $OUTPUT -maxdepth 1 -name $PKGREQ-[0-9]*.txz)}
 installpkg || exit 1
fi
}

catlog() {
if [ -z "$PKGREQ" ]; then
 gfstalk "usage:"
 gfstalk " $(basename $0) prepare 'ProgramName'"
 exit 1
else
 if [ -z "$LOGREQ" ]; then
  gfstalk "required log not found!"
  exit 1
 else
  cat "$LOGREQ" | less
 fi
fi
}

newtemplate() {
if [ -z "$PKGREQ" ]; then
 gfstalk "usage:"
 gfstalk " $(basename $0) new 'ProgramName'"
else
 if [ -d "$PKGREQ" ]; then
  gfstalk "this directory already exist!"
  exit 1
 else
  mkdir -p "$PKGREQ" || exit 1
  cp template.SlackBuild "$PKGREQ"/"$PKGREQ".SlackBuild || exit 1
  edit || exit 1
  build || exit 1
  unset FINDREQ
  FINDREQ=${FINDREQ:-$(find $OUTPUT -maxdepth 1 -name $PKGREQ-[0-9]*.txz)}
  installpkg || exit 1
 fi
fi
}

makegfspkg() {
cd $GFSCWD
mkdir -p pkg/opt/gfs
mv TODO gfs README.md source pkg/opt/gfs/
cd pkg
mkdir -p usr/sbin
ln -s /opt/gfs/gfs usr/sbin/gfs
mkdir -p install
#            |-----handy-ruler------------------------------------------------------|
cat <<EOT >install/slack-desc
slackport-gfs:
slackport-gfs: GNOME From Scratch (gfs) System Builder
slackport-gfs:
slackport-gfs: This package contains SlackBuild scripts needed to build the GNOME
slackport-gfs: for Slackware. The gfs is an executable script responsible for build
slackport-gfs: and install the packages in pre-set order. In addition, gfs works as
slackport-gfs: a tool for editing, building and install pacakges in a more practical
slackport-gfs: and automated way.
slackport-gfs:
slackport-gfs: https://github.com/slackport/gfs
slackport-gfs:
EOT
makepkg -l y -c n $OUTPUT/slackport-gfs-$GFSVERSION-x86_64-1_gfs.txz
cd ..
rm -rf pkg/
}

gfsversion() {
gfstalk "$GFSVERSION"
}

gfshelp() {
cat <<EOT


         GNOME From Scratch - version $GFSVERSION


  gfs autopkg		    - Create a txz package with gfs directory
			      and /usr/sbin/gfs symlink.
  gfs edit programname      - Edit respective SlackBuild file.
  gfs build programname     - Run the programname SlackBuild file.
  gfs cat programname       - See the log of installed package.
  gfs catlog programname    - Same as above.
  gfs help		    - Show this help mensage.
  gfs install programname   - Install the package on $OUTPUT directory.
  gfs new programname	    - Will create a directory and copy
			      template.SlackBuid into it with 'programname'
			      specified. So will edit, build and install this
			      'programname' sequentially..
  gfs prepare programname   - Will execute 'edit' 'build' and 'install' sequentially.
  gfs see programname       - Same as 'cat' command.
  gfs version               - Show gfs version.

EOT
}

case "$1" in
 "") continue ;;
 autopkg|-a) makegfspkg && exit 1 ;;
 edit|-e) edit && exit 1 ;;
 build|-b) build && exit 1 ;;
 cat|-c) catlog && exit 1 ;;
 catlog|-c) catlog && exit 1 ;;
 help|-h) gfshelp && exit 1 ;;
 install|-i) installpkg && exit 1 ;;
 new|-n) newtemplate && exit 1 ;;
 prepare|-p) prepare && exit 1 ;;
 see|-s) catlog && exit 1 ;;
 version|-v) gfsversion && exit 1 ;;
 *) PKGREQ=$PKGREQ2 && prepare && exit 1 ;;
esac



message() {
gfstalk "I need to add $subject $name."
gfstalk "Is that allright with you ?"
gfstalk "yes / no"
read reply
 case $reply in
  "yes") gfstalk "Adding $subject $name" ;;
  "no") gfstalk "Not adding $subject $name" && exit $? ;;
 esac
}




#REBUILDFLATPAK=${REBUILDFLATPAK:-"no"}

for buildpkg in "${PKGBUILD[@]}"; do
 if [ -z "$(ls /var/log/packages | grep ^$buildpkg-[0-9] | grep _gfs)" ]; then
  gfstalk "Building $buildpkg..."
  sleep 1
  cd $buildpkg
  pwd && ls
  #OUTPUT=$buildpkg 
  bash $buildpkg.SlackBuild
  gfstalk "$buildpkg builded! Installing..."
  sleep 1
  PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^$buildpkg-[0-9] | grep _gfs)"}
  upgradepkg --install-new --reinstall $PKGINST
  cd ..
 else
  gfstalk "$buildpkg is already installed!"
 fi
done

gfstalk
gfstalk "All done!"
gfstalk "--------"

